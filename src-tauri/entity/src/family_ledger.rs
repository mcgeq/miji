//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "family_ledger")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub serial_num: String,
    pub name: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub base_currency: String,
    pub members: Option<String>,
    pub accounts: Option<String>,
    pub transactions: Option<String>,
    pub budgets: Option<String>,
    pub audit_logs: String,
    pub created_at: String,
    pub updated_at: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::currency::Entity",
        from = "Column::BaseCurrency",
        to = "super::currency::Column::Code",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Currency,
    #[sea_orm(has_many = "super::family_ledger_account::Entity")]
    FamilyLedgerAccount,
    #[sea_orm(has_many = "super::family_ledger_member::Entity")]
    FamilyLedgerMember,
    #[sea_orm(has_many = "super::family_ledger_transaction::Entity")]
    FamilyLedgerTransaction,
}

impl Related<super::currency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Currency.def()
    }
}

impl Related<super::family_ledger_account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FamilyLedgerAccount.def()
    }
}

impl Related<super::family_ledger_member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FamilyLedgerMember.def()
    }
}

impl Related<super::family_ledger_transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FamilyLedgerTransaction.def()
    }
}

impl Related<super::family_member::Entity> for Entity {
    fn to() -> RelationDef {
        super::family_ledger_member::Relation::FamilyMember.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::family_ledger_member::Relation::FamilyLedger
                .def()
                .rev(),
        )
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        super::family_ledger_transaction::Relation::Transactions.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::family_ledger_transaction::Relation::FamilyLedger
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
