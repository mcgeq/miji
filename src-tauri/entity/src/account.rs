//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "account")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub serial_num: String,
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub r#type: String,
    pub balance: Decimal,
    pub initial_balance: Decimal,
    pub currency: String,
    pub is_shared: i32,
    pub owner_id: Option<String>,
    pub color: Option<String>,
    pub is_active: i32,
    pub created_at: String,
    pub updated_at: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::budget::Entity")]
    Budget,
    #[sea_orm(
        belongs_to = "super::currency::Entity",
        from = "Column::Currency",
        to = "super::currency::Column::Code",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Currency,
    #[sea_orm(has_many = "super::family_ledger_account::Entity")]
    FamilyLedgerAccount,
    #[sea_orm(
        belongs_to = "super::family_member::Entity",
        from = "Column::OwnerId",
        to = "super::family_member::Column::SerialNum",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    FamilyMember,
    #[sea_orm(has_many = "super::transactions::Entity")]
    Transactions,
}

impl Related<super::budget::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Budget.def()
    }
}

impl Related<super::currency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Currency.def()
    }
}

impl Related<super::family_ledger_account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FamilyLedgerAccount.def()
    }
}

impl Related<super::family_member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FamilyMember.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
