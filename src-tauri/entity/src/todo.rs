//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use crate::localize::LocalizeModel;
use localize_model_derive::LocalizeModel;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Text")]
#[serde(rename_all = "PascalCase")]
pub enum Status {
    #[sea_orm(string_value = "NotStarted")]
    NotStarted,
    #[sea_orm(string_value = "InProgress")]
    InProgress,
    #[sea_orm(string_value = "Completed")]
    Completed,
    #[sea_orm(string_value = "Cancelled")]
    Cancelled,
    #[sea_orm(string_value = "Overdue")]
    Overdue,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Text")]
#[serde(rename_all = "PascalCase")]
pub enum Priority {
    #[sea_orm(string_value = "Low")]
    Low,
    #[sea_orm(string_value = "Medium")]
    Medium,
    #[sea_orm(string_value = "High")]
    High,
    #[sea_orm(string_value = "Urgent")]
    Urgent,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, LocalizeModel)]
#[sea_orm(table_name = "todo")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub serial_num: String,
    pub title: String,
    pub description: Option<String>,
    pub due_at: DateTimeWithTimeZone,
    pub priority: Priority,
    pub status: Status,
    pub repeat: Option<String>,
    pub completed_at: Option<DateTimeWithTimeZone>,
    pub assignee_id: Option<String>,
    pub progress: i32,
    pub location: Option<String>,
    pub owner_id: Option<String>,
    pub is_archived: bool,
    pub is_pinned: bool,
    pub estimate_minutes: Option<i32>,
    pub reminder_count: i32,
    pub parent_id: Option<String>,
    pub subtask_order: Option<i32>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attachment::Entity")]
    Attachment,
    #[sea_orm(has_many = "super::reminder::Entity")]
    Reminder,
    #[sea_orm(has_many = "super::todo_project::Entity")]
    TodoProject,
    #[sea_orm(has_many = "super::todo_tag::Entity")]
    TodoTag,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::OwnerId",
        to = "super::users::Column::SerialNum",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Users,
}

impl Related<super::attachment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attachment.def()
    }
}

impl Related<super::reminder::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reminder.def()
    }
}

impl Related<super::todo_project::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TodoProject.def()
    }
}

impl Related<super::todo_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TodoTag.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::project::Entity> for Entity {
    fn to() -> RelationDef {
        super::todo_project::Relation::Project.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::todo_project::Relation::Todo.def().rev())
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::todo_tag::Relation::Tag.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::todo_tag::Relation::Todo.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
