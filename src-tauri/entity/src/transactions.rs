//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "transactions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub serial_num: String,
    pub transaction_type: String,
    pub transaction_status: String,
    pub date: String,
    pub amount: Decimal,
    pub refund_amount: Decimal,
    pub currency: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    pub account_serial_num: String,
    pub to_account_serial_num: Option<String>,
    pub category: String,
    pub sub_category: Option<String>,
    pub tags: Option<String>,
    pub split_members: Option<String>,
    pub payment_method: String,
    pub actual_payer_account: String,
    pub related_transaction_serial_num: Option<String>,
    pub is_deleted: i32,
    pub created_at: String,
    pub updated_at: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::AccountSerialNum",
        to = "super::account::Column::SerialNum",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Account,
    #[sea_orm(has_many = "super::bil_reminder::Entity")]
    BilReminder,
    #[sea_orm(
        belongs_to = "super::currency::Entity",
        from = "Column::Currency",
        to = "super::currency::Column::Code",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Currency,
    #[sea_orm(has_many = "super::family_ledger_transaction::Entity")]
    FamilyLedgerTransaction,
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::bil_reminder::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BilReminder.def()
    }
}

impl Related<super::currency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Currency.def()
    }
}

impl Related<super::family_ledger_transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FamilyLedgerTransaction.def()
    }
}

impl Related<super::family_ledger::Entity> for Entity {
    fn to() -> RelationDef {
        super::family_ledger_transaction::Relation::FamilyLedger.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::family_ledger_transaction::Relation::Transactions
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
