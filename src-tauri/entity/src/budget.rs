//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use crate::localize::LocalizeModel;
use localize_model_derive::LocalizeModel;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, LocalizeModel)]
#[sea_orm(table_name = "budget")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub serial_num: String,
    pub account_serial_num: Option<String>,
    pub name: String,
    pub description: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((15, 2)))")]
    pub amount: Decimal,
    pub currency: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub repeat_period: Json,
    pub start_date: DateTimeWithTimeZone,
    pub end_date: DateTimeWithTimeZone,
    #[sea_orm(column_type = "Decimal(Some((15, 2)))")]
    pub used_amount: Decimal,
    pub is_active: bool,
    pub alert_enabled: bool,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub alert_threshold: Option<Json>,
    pub color: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Decimal(Some((15, 2)))")]
    pub current_period_used: Decimal,
    pub current_period_start: Date,
    pub last_reset_at: DateTimeWithTimeZone,
    pub budget_type: String,
    #[sea_orm(column_type = "Decimal(Some((15, 2)))")]
    pub progress: Decimal,
    pub linked_goal: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub reminders: Option<Json>,
    pub priority: i8,
    pub tags: Option<Json>,
    pub auto_rollover: bool,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub rollover_history: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub sharing_settings: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub attachments: Option<Json>,
    pub budget_scope_type: String,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub account_scope: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub category_scope: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub advanced_rules: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::AccountSerialNum",
        to = "super::account::Column::SerialNum",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Account,
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
