//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use crate::localize::LocalizeModel;
use localize_model_derive::LocalizeModel;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, LocalizeModel)]
#[sea_orm(table_name = "period_pms_symptoms")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub serial_num: String,
    pub period_pms_records_serial_num: String,
    pub symptom_type: String,
    pub intensity: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::period_pms_records::Entity",
        from = "Column::PeriodPmsRecordsSerialNum",
        to = "super::period_pms_records::Column::SerialNum",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PeriodPmsRecords,
}

impl Related<super::period_pms_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PeriodPmsRecords.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
