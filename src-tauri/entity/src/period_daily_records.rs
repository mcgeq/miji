//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use crate::localize::LocalizeModel;
use localize_model_derive::LocalizeModel;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, LocalizeModel)]
#[sea_orm(table_name = "period_daily_records")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub serial_num: String,
    pub period_serial_num: String,
    pub date: DateTimeWithTimeZone,
    pub flow_level: Option<String>,
    pub exercise_intensity: String,
    pub sexual_activity: bool,
    pub contraception_method: Option<String>,
    pub diet: String,
    pub mood: Option<String>,
    pub water_intake: Option<i32>,
    pub sleep_hours: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::period_symptoms::Entity")]
    PeriodSymptoms,
}

impl Related<super::period_symptoms::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PeriodSymptoms.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
